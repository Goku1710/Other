
#Vernam Ciphar Demo 2

import random
def generate_key(plaintext_length):
    key = ''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ') for _ in
    range(plaintext_length))
    return key
def encrypt(plaintext, key):
    ciphertext = ''.join(chr(ord(p) ^ ord(k)) for p, k in zip(plaintext, key))
    return ciphertext
def decrypt(ciphertext, key):
    decrypted_text = ''.join(chr(ord(c) ^ ord(k)) for c, k in zip(ciphertext,
    key))
    return decrypted_text
# Example usage
if __name__ == "__main__":
    plaintext = "HELLO"
    key = generate_key(len(plaintext))
    print("Plaintext:", plaintext)
    print("Key:", key)
    ciphertext = encrypt(plaintext, key)
    print("Ciphertext:", ciphertext)
    decrypted_text = decrypt(ciphertext, key)
    print("Decrypted Text:", decrypted_text)

--------------------------------------------------------------------------------------

#Caesar Cipher

import string
pt=input("Enter plain text")
shift_value=int(input("Enter the value to Shift: "))
alp=list(string.ascii_lowercase)
c1=""
c=0
c_list=[]
c2=""
for i in range(0,len(pt)):
    if pt[i].isalpha():
        c=(alp.index(pt[i]))+shift_value
        if(c>26):
            c=c%26
        c1=c1+alp[c]
print("The encrypted Text is: ",c1)
for i in range(0,len(c1)):
    if c1[i].isalpha():
        c=(alp.index(c1[i]))-shift_value
        if(c>26):
            c=c%26
        c2=c2+alp[c]
print("The dencrypted text is: ",c2)

--------------------------------------------------------------------------------------
# MONOALPHABETIC CIPHER

import string
def generate_cipher_key(shift):
    alphabet = string.ascii_lowercase
    print(alphabet)
    shifted_alphabet=alphabet[shift:]+alphabet[:shift]
    print(shifted_alphabet)
    return str.maketrans(alphabet,shifted_alphabet)
def encrypt(text,shift):
    cipher_key=generate_cipher_key(shift)
    return text.translate(cipher_key)
def decrypt(encrypted_text,shift):
    cipher_key=generate_cipher_key(-shift)
    return encrypted_text.translate(cipher_key)
#Example Driver Code

message="HELLOBOY"
shift=3

encrypted=encrypt(message.lower(),shift)
print("Encryped ",encrypted)
decrypted = decrypt(encrypted,shift)
print("Decrypted",decrypted)

--------------------------------------------------------------------------------------
# RAILFENCE CIPHER
# ENCRYPTION BLOCK
def encrypt_rail_fence(message, rails):
    fence = [[' ' for _ in range(len(message))] for _ in range(rails)]
    rail = 0
    direction = 1 # Direction 1 for down, -1 for up
    for char in message:
        fence[rail][0] = char
        rail += direction
        if rail == rails or rail == -1:
            direction *= -1
            rail += 2 * direction
    encrypted_message = ''
    for row in fence:
        encrypted_message += ''.join(row)
    return encrypted_message
# DECRYPTION BLOCK
def decrypt_rail_fence(encrypted_message, rails):
    fence = [[' ' for _ in range(len(encrypted_message))] for _ in
range(rails)]
    rail = 0
    direction = 1
    for i in range(len(encrypted_message)):
        fence[rail][i] = '*'
        rail += direction
        if rail == rails or rail == -1:
            direction *= -1
            rail += 2 * direction
    index = 0
    for row in range(rails):
        for col in range(len(encrypted_message)):
            if fence[row][col] == '*':
                fence[row][col] = encrypted_message[index]
                index += 1
    rail = 0
    direction = 1
    decrypted_message = ''
    for _ in range(len(encrypted_message)):
        decrypted_message += fence[rail][0]
        rail += direction
        if rail == rails or rail == -1:
            direction *= -1
            rail += 2 * direction
    return decrypted_message
# Example usage:
message = "HELLO WORLD"
rails = 3
encrypted_message = encrypt_rail_fence(message, rails)
print("Encrypted:", encrypted_message)
decrypted_message = decrypt_rail_fence(encrypted_message, rails)
print("Decrypted:", decrypted_message)

-------------------------------------------------------------------------------------

# RSA
import random

# Step 1: Choose two large prime numbers, p and q
def generate_large_primes(bits):
    while True:
        num = random.getrandbits(bits)
        if is_prime(num):
            return num
def is_prime(num):
    if num <= 1:
        return False
    if num <= 3:
        return True
    if num % 2 == 0 or num % 3 == 0:
        return False
    i = 5
    while i * i <= num:
        if num % i == 0 or num % (i + 2) == 0:
            return False
        i += 6
    return True

# Step 2: Compute n = p * q and Euler's totient function phi(n)
def compute_n_phi(p, q):
    n = p * q
    phi = (p - 1) * (q - 1)
    return n, phi

# Step 3: Choose an encryption key e (public key)
def choose_public_key(phi):
    while True:
        e = random.randint(2, phi - 1)
        if gcd(e, phi) == 1:
            return e
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# Step 4: Compute the modular multiplicative inverse d (private key)
def compute_private_key(e, phi):
    d = mod_inverse(e, phi)
    return d
def mod_inverse(a, m):
    m0, x0, x1 = m, 0, 1
    while a > 1:
        q = a // m
        m, a = a % m, m
        x0, x1 = x1 - q * x0, x0
    return x1 + m0 if x1 < 0 else x1
# Step 5: Encryption and Decryption
def encrypt(message, e, n):
    ciphertext = [pow(ord(char), e, n) for char in message]
    return ciphertext
def decrypt(ciphertext, d, n):
    plaintext = ''.join([chr(pow(char, d, n)) for char in ciphertext])
    return plaintext
if __name__ == '__main__':
    bits = 16 # Adjust the number of bits for larger primes
    p = generate_large_primes(bits)
    q = generate_large_primes(bits)
    n, phi = compute_n_phi(p, q)
    e = choose_public_key(phi)
    d = compute_private_key(e, phi)
    message = input("Enter a message to encrypt: ")
    ciphertext = encrypt(message, e, n)
    print("Encrypted message:", ciphertext)
    decrypted_message = decrypt(ciphertext, d, n)
    print("Decrypted message:", decrypted_message)

-------------------------------------------------------------------------------------
# Deffie-Hellman

import math
int1=int(input("Enter the modulo p:"))
int2=int(input(f"Enter the root primitive of {int1}"))
a=int(input("Choose the 1st secret no(Alice)"))
b=int(input("Choose the second secret key (BOb)"))
A=int(math.pow(int2,a)%int1)
B=int(math.pow(int2,b)%int1)
A_ =int(math.pow(B,a)%int1)
B_ =int(math.pow(A,b)%int1)
if A_ ==B_:
    print("Alice and Bob can communicate ")
else:
    print("Alice and Bob cannot communicate")


-------------------------------------------------------------------------------------

# MD5 HASH
from hashlib import md5
str1=input("Enter the Plain Text: ")
if str1.isalpha()==True:
    hashed=md5(str1.encode('utf-8')).hexdigest()
else:
    print("Enter only alphabets")
print(hashed)

-------------------------------------------------------------------------------------

# SHA256 HASH
from hashlib import sha256
str1=input("Enter the Plain Text: ")
print(str1)
if str1.isalpha()==True:
    hashed=sha256(str1.encode('utf-8')).hexdigest()
else:
    print("Enter only alphabets")
print("HASHED: ",hashed)

-------------------------------------------------------------------------------------

