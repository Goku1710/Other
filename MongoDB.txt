to Connect to MongoDB 
Go to bin in MongoDb Folder in C Drive 
Open cmd in that folder run -> mongod --dpath="enter path here"
Open another cmd in that folder run -> mongo 



> use mydb    - Connect to db
switched to db mydb
> db.adminCommand({listDatabases:1})  - List all the Databases
{
        "databases" : [
                {
                        "name" : "admin",
                        "sizeOnDisk" : 40960,
                        "empty" : false
                },
                {
                        "name" : "config",
                        "sizeOnDisk" : 36864,
                        "empty" : false
                },
                {
                        "name" : "local",
                        "sizeOnDisk" : 98304,
                        "empty" : false
                },
                {
                        "name" : "mydb",
                        "sizeOnDisk" : 40960,
                        "empty" : false
                }
        ],
        "totalSize" : 217088,
        "ok" : 1
}
> show collections  - Show all the Collections
myNewCollection1


> db.myNewCollection1.insertOne({x:1})   - Inserting a Collection named as myNewCollection1 
{
        "acknowledged" : true,
        "insertedId" : ObjectId("65d6cf22b65641ad490d4d59")
}
> show collections
myNewCollection1

>db.inventory.insertMany( [
... { item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
... { item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "P" },
... { item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D" },
... { item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D" },
... { item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" },
... ] );     --- > Insert Many Takes Multiple JSON objects to be inserted in the Collection
	'[]' - Brackets to Insert an Array of JSON Objects
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("65d6cfcfb65641ad490d4d5a"),
                ObjectId("65d6cfcfb65641ad490d4d5b"),
                ObjectId("65d6cfcfb65641ad490d4d5c"),
                ObjectId("65d6cfcfb65641ad490d4d5d"),
                ObjectId("65d6cfcfb65641ad490d4d5e")
        ]
}

> db.students.insertOne({name:"Raj",Rollno:69}) - Inserting a Single JSON Object in Document
{
        "acknowledged" : true,
        "insertedId" : ObjectId("65d6d061b65641ad490d4d5f")
}

> show collections
inventory
myNewCollection1
students

> db.students.drop() - Drop a Students Collection
true

//Select Query

>db.inventory.find({}).pretty() - to See a Collection
=>.pretty() is to see the collection in a proper format

> db.inventory.find({"item" : "postcard"}).pretty() 
          --> to find a JSON Object in a Collection Based on Particular Condtion

>db.inventory.find({status:{$in:["A","D"]}}).pretty()
          -->to find a  JSON Object for a key with multiple values in collections Based on Particular Condition

> db.inventory.find({qty:{$lt:30}}).pretty()
          --> to find a JSON Object for a numeric Property less than ($lt) in the collection
 
>db.inventory.find({item : {$nin:["postcard"]}}).pretty()
          --> to find a JSON Object that is not a Given Value {$nin} in the collection

# Retrieve all documents in the collection where
the status equals "A" or qty is less than ($lt) 30
ANS -  db.inventory.find({status :"A"}||{qty:{$lt:30}}).pretty()


# the compound query document selects all documents in the
collection where the status equals "A" and either qty is less than ($lt) 30 or item starts
with the character p
ANS-  db.inventory.find({status :"A"}||{qty:{$lt:30}&&{item:"/^p/"}}).pretty()


//Update query
> db.students.update({"name":"Sam DeeZ Nuts"},{$set:{"name":"Sam"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
           --> Updating the name in the Document with a new One



//Save query
 db.products.save({ "_id" : "P003", "name" : "Mexican", "unitprice" : 250, "stock" : 450 })
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
           --> Saving new values in the Document for Multiple Values


//Remove query
>db.products.remove({"_id":"P002"})
    -->Remove a Document Based on an Id

>db.products.remove({"stock":450},1)
    --> Remove a Document with Stock :450 and remove its first Instance

> db.products.remove({}) 
    --> Remove all the Documents


//TO Drop a Collection

> db.myNewCollection1.drop()
    --> where myNewCollection1 is a Collection

//TO Disconnect from a db 
>db.logout()


MongoDB Projection 

In mongodb projection meaning is selecting only necessary data rather than selecting whole
of the data of a document. If a document has 5 fields and you need to show only 3, then select
only 3 fields from them.
The find() Method
MongoDB's find() method, explained in previously accepts second optional
parameter that is list of fields that you want to retrieve. In MongoDB when you
execute find() method, then it displays all fields of a document. To limit this you need to set list of fields with value 1 or 0. 1 is used to show the field while 0 is used to hide
the field.

> db.inventory.find({},{'_id': 0, 'item': 1, 'qty':1, 'status':1}).pretty();

-->To retrive only the item, qty,status

> db.inventory.find({},{'_id' : 0, 'item': 1, 'qty': 1, 'status': 1, 'size':{'in': 1}}).pretty();

-->To retrive only the item, qty, status, size with only inches

// Sort

> db.inventory.find(0,{'_id': 0, 'item':1, 'qty':1, 'status': 1}).sort({'qty': 1}).pretty(); -->Sorting on The qty in ascending order

> db.inventory.find( {'_id': 0, 'item': 1, 'qty':1, 'status': 1}).sort({'status':1, 'qty':-1}).pretty();

-->Sorting on The Basis of Status in Ascending Order and qty in descendingÂ order






